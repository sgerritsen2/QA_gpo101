// Generated by Selenium IDE

const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');
const fs = require('fs');

describe('test1', function () {
  this.timeout(30000);

  let driver;
  let vars;

  // Crear carpeta para capturas de pantalla si no existe
  if (!fs.existsSync('./screenshots')) {
    fs.mkdirSync('./screenshots');
  }

  beforeEach(async function () {
    const chrome = require('selenium-webdriver/chrome');
    const options = new chrome.Options();
    
    options.addArguments('--headless', '--no-sandbox', '--disable-dev-shm-usage');
    
    driver = await new Builder()
      .forBrowser('chrome')
      .setChromeOptions(options)
      .build();

    vars = {};
  });

  afterEach(async function () {
    if (driver) {
      // Tomar captura de pantalla de la p√°gina actual
      const filename = this.currentTest.fullTitle()
        .replace(/['"]+/g, '')
        .replace(/[^a-z0-9]/gi, '_')
        .toLowerCase();
      
      const encodedString = await driver.takeScreenshot();
      await fs.writeFileSync(`./screenshots/${filename}.png`, encodedString, 'base64');

      // Cerrar el navegador
      await driver.quit();
    }
  });
});

  it('test_6', async function() {
    await driver.get("http://localhost:8000/")
    await driver.manage().window().setRect({ width: 1053, height: 799 })
    await driver.findElement(By.linkText("src/")).click()
    await driver.findElement(By.id("num1")).click()
    await driver.findElement(By.id("num1")).sendKeys("21")
    await driver.findElement(By.id("num2")).click()
    await driver.findElement(By.id("num2")).sendKeys("31")
    await driver.findElement(By.css("button:nth-child(2)")).click()
  })
})
